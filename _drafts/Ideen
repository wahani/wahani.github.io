Engineering:
  Efficiency:
    microbenchmark
    profr
    lineprof
  Correctness:
    testthat
    assertthat
    rUnit
    Debug-Tools
    logging
  Ellegance:
    Style-Guide - Conventions
  Tools:
    Keeping track of functions in package
    Building Documentation
    staticdocumentation
    git


Templates:
  - Skripte
  - Multicore
  - Simulation

Style-Guide:
  - Header
    - Author
    - License
    - Description
    - Table of Contents
  - Functions: Quik description, arguments
  - The use of free variables

Functional Programming:
  - Ersetzen von for-Schleifen
  - Was ist mit while?
  - lapply - Reduce
  - Functions inside functions and lexical scoping
  - currying
  - referential transparency
  - higher order functions
  - cyclomatic complexity
  - map vs. fold
  - mutable state
  - Declerative programming - Imperative Programming
  - Polymorphism - Isomorphism
  - Atomic vs. primitive
  - Class vs. type
  - Procedural language


Interessante Pakete:
  - cran-packages github.com/hadley
  - relaimpo
  - hier.part
  - Cowplot
  - Rdsm

Education:
  - statsTeachR
  - swirl
  - markmyassignment

Pattern:
  - See: http://www.infoq.com/presentations/Clojure-Design-Patterns
  - wrapper pattern (+)
  - pipeline pattern
  - split-apply-combine
  - Railway Oriented Programming
      - Single Track Functions
      - Dead-end functions
      - Functions that throw exceptions
      - Supervisory functions
  - Designing for errors
  - Explicit vectorization
  doSomething <- function(x) {
    iter <- function(x) ...
    lapply(x, iter)
  }
  - If-else vs. methods
  if (is.numeric(x)) ... # Maybe this is a type
  - Cache pattern (+)
